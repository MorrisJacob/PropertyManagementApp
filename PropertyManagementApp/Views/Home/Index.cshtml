@model RootModel
@{
    ViewData["Title"] = "Home Page";
}

<select id="Managerddl">
    <option value="All">All</option>
    @foreach(var manager in Model.property_data.Select(s => s.manager_name).OrderBy(s => s).Distinct())
    {
        <option value="@manager">@manager</option>
    }
</select>
<!--The div element for the map -->
<div class="map-wrapper">
    <div id="map"></div>
</div>
<br/>
<br/>
<input id="btnCompetitorManagerList" type="button" value="View Non-RENU Managers" />



<!-- prettier-ignore -->
<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
        ({ key: "AIzaSyCM9Qiu9zFFHXTFQoqHD5C-StI-9JJKvAo", v: "beta" });</script>


<script>

    var map;
    var position;
    //empty dictionary where we will store pins.
    var pos = {};
    async function initMap() {

        // Request needed libraries.
        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        position = { lat: 38.627003, lng: -90.199402 };
        //Load the map
        map = new Map(document.getElementById("map"), {
            zoom: 4,
            center: position,
            mapId: "DEMO_MAP_ID",
        });

        @for (var i = 0; i < Model.property_data.Count; i++)
        {
            <text>
                position.lat = @Model.property_data[i].latitude;
            position.lng = @Model.property_data[i].longitude;
            // The marker
            pos[</text>@i<text>] = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: "@Model.property_data[i].address",
            });
            pos[</text>@i<text>].setAttribute('manager', "@Model.property_data[i].manager_name");
            </text>
        }
    }

    initMap();

    function clearMap() {
        //remove map properties, thus clearing map of markers. Strange choice, but Google's official way to do this.
        for(let i=0; i < Object.keys(pos).length; i++){
            pos[i].map = null;
        }
    }

    function showMarkers(manager){
        if(manager=="All"){
            for (let i = 0; i < Object.keys(pos).length; i++) {
                pos[i].map = map;
            }
            return;
        }
        for (let i = 0; i < Object.keys(pos).length; i++) {
            if(pos[i].getAttribute('manager') == manager){
                pos[i].map = map;
            }
        }
    }

    function ClearDropdown(){
        $('#Managerddl').html('');
    }

    function LoadDropdown(managerOptions){
        ClearDropdown();
        let options = '';
        for(let i=0; i <= managerOptions.length; i++){
            options += '<option value="' + managerOptions[i] + '">' + managerOptions[i] + '</option>';
        }
        $('#Managerddl').html(options);
    }

    async function LoadCompetitorMarkers(propertyData){

        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");


        let currentIndex = Object.keys(pos).length;
        for(let i = 0; i <= propertyData.length - 1; i++){
            position.lat = propertyData[i].latitude;
            position.lng = propertyData[i].longitude;
            // The marker
            pos[currentIndex] = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: propertyData[i].address,
            });
            pos[currentIndex].setAttribute('manager', propertyData[i].manager_name);
            currentIndex += 1;
        }
    }

    $('#Managerddl').on('change', function(){
        //Clear map of all markers
        clearMap();
        //Show markers for the selected Manager Name.
        showMarkers($(this).val());
    });

    $('#btnCompetitorManagerList').on('click', function(){
        $(this).hide();
        $.ajax({
            url: '/Home/GetCompetitorProperties',
            type: 'GET'
        })
        .done(function(data){
            //get unique manager names and populate dropdown
            let managerNames = [...new Set(data.property_data.map(item => item.manager_name))].sort();
            LoadDropdown(managerNames);
            //Clear map of all markers
            clearMap();
            
            //TODO: Show markers for competitors
            LoadCompetitorMarkers(data.property_data);
            
        });
    });

</script>